import pandas as pd
import numpy as np
import time
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from xgboost import XGBClassifier
import joblib

# Load dataset
df = pd.read_csv("AIBL.csv")

# Define diagnosis features
diagnosis_features = ['DXNORM', 'DXMCI', 'DXAD']

# Function to create DXTYPE
def create_DXTYPE(DXNORM, DXMCI, DXAD):
    if DXNORM == 1:
        return 0   
    elif DXMCI == 1:
        return 1  
    elif DXAD == 1:
        return 2  
    else:
        return -1  

# Create DXPOS before removing other diagnosis features
df['DXTYPE'] = df.apply(lambda row: create_DXTYPE(row['DXNORM'], row['DXMCI'], row['DXAD']), axis=1)

# Now remove the unnecessary diagnosis features:
df.drop(diagnosis_features, axis=1, inplace=True)

# Calculate age
df["ExamAge"] = df["Examyear"] - df["PTDOBYear"]

# Data Preprocessing
df.dropna(inplace=True)

# Define your updated feature list
desired_features = ['APGEN1','APGEN2','CDGLOBAL','AXT117','BAT126','HMT3','HMT7' ,
'HMT13','HMT40','HMT100','HMT102','RCT6','RCT11','RCT20','RCT392', 'MHPSYCH',
'MH2NEURL','MH4CARD','MH6HEPAT','MH8MUSCL','MH9ENDO',
'MH10GAST','MH12RENA','MH16SMOK','MH17MALI','MMSCORE','LIMMTOTAL', 
'LDELTOTAL' ,'PTGENDER',"ExamAge", 'APTyear']

# Extract features and labels
X = df[desired_features]
y = df['DXTYPE']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define hyperparameters grid for XGBoost
param_grid = {
    "learning_rate": [0.01, 0.1, 0.5],
    "n_estimators": [50, 100, 150],
    "max_depth": [3, 5, 7]
}

# Initialize XGBoost classifier
xgb_classifier = XGBClassifier()

# Perform hyperparameter tuning using GridSearchCV
grid_search = GridSearchCV(xgb_classifier, param_grid, cv=5, scoring='accuracy', n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)

# Get the best XGBoost classifier
best_xgb_classifier = grid_search.best_estimator_

# Save the best XGBoost classifier
joblib.dump(best_xgb_classifier, "best_xgb_model.pkl")

# Load the best XGBoost classifier
loaded_xgb_classifier = joblib.load("best_xgb_model.pkl")

# Evaluate the best XGBoost classifier
y_pred = loaded_xgb_classifier.predict(X_test_scaled)
classification_rep = classification_report(y_test, y_pred)

# Print classification report
print("Classification Report for XGBoost:")
print(classification_rep)
