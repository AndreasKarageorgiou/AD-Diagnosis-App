import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, HistGradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.svm import SVC
from xgboost import XGBClassifier


def get_clean_data():
    df = pd.read_csv("AIBL.csv")
    # Apply any necessary transformations as during training
    diagnosis_features = ['DXNORM', 'DXMCI', 'DXAD']
    def create_DXTYPE(DXNORM, DXMCI, DXAD):
        if DXNORM == 1:
            return 0
        elif DXMCI == 1:
            return 1
        elif DXAD == 1:
            return 2
        else:
            return -1

    # Apply the function to create a target variable 'DXTYPE'
    df['DXTYPE'] = df.apply(lambda row: create_DXTYPE(row['DXNORM'], row['DXMCI'], row['DXAD']), axis=1)

    # Calculate age before dropping 'Examyear' and 'PTDOBYear'
    if 'Examyear' in df.columns and 'PTDOBYear' in df.columns:
        df["ExamAge"] = df["Examyear"] - df["PTDOBYear"]    

    # Columns to drop including the 'APTyear', 'Examyear', 'PTDOBYear', and 'DXCURREN'
    columns_to_drop = diagnosis_features + ['APTyear', 'Examyear', 'PTDOBYear', 'DXCURREN']
    df.drop(columns_to_drop, axis=1, inplace=True)
    
    return df
df = get_clean_data()

# Define your updated feature list
desired_features = ['APGEN1','APGEN2','CDGLOBAL','AXT117','BAT126','HMT3','HMT7' ,
'HMT13','HMT40','HMT100','HMT102','RCT6','RCT11','RCT20','RCT392', 'MHPSYCH',
'MH2NEURL','MH4CARD','MH6HEPAT','MH8MUSCL','MH9ENDO',
'MH10GAST','MH12RENA','MH16SMOK','MH17MALI','MMSCORE','LIMMTOTAL', 
'LDELTOTAL' ,'PTGENDER',"ExamAge"]

# Extract features and labels
X = df[desired_features]
y = df['DXTYPE']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define classifiers
classifiers = {
    "Random Forest": RandomForestClassifier(),
    "Gradient Boosting": GradientBoostingClassifier(),
    "AdaBoost": AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=3)),
    "HistGradientBoosting": HistGradientBoostingClassifier(), # Relatively new model
    "KNN": KNeighborsClassifier(),
    "Logistic Regression": LogisticRegression(),
    "XGBoost": XGBClassifier(),
    "Support Vector Machine": SVC()
}

# Define hyperparameters grid for each classifier
param_grids = {
    "Random Forest": {
        "n_estimators": [50, 100, 150],
        "max_depth": [None, 10, 20]
    },
    "Gradient Boosting": {
        "n_estimators": [50, 100, 150],
        "learning_rate": [0.01, 0.1, 0.5]
    },
    "AdaBoost": {
        "n_estimators": [50, 100, 150],
        "learning_rate": [0.01, 0.1, 0.5]
    },
    "HistGradientBoosting": {
        "max_iter": [50, 100, 150]
    },
    "KNN": {
        "n_neighbors": [3, 5, 7]
    },
    "Logistic Regression": {
        "C": [0.1, 1.0, 10.0]
    },
    "XGBoost": {
        "learning_rate": [0.01, 0.1, 0.5],
        "n_estimators": [50, 100, 150]
    },
    "Support Vector Machine": {
        "C": [0.1, 1.0, 10.0],
        "gamma": ["scale", "auto"]
    }
}

# Initialize a dictionary to store best estimators
best_estimators = {}

# Perform hyperparameter tuning and store best estimators
for name, clf in classifiers.items():
    # Create GridSearchCV object
    grid_search = GridSearchCV(clf, param_grids[name], cv=5, scoring='accuracy', n_jobs=-1)
    
    # Perform grid search
    grid_search.fit(X_train_scaled, y_train)
    
    # Get best estimator
    best_estimators[name] = grid_search.best_estimator_

# Initialize a dictionary to store results for each classifier
results_with_tuning = {}

# Perform 10-fold cross-validation for each classifier with tuned hyperparameters
for name, clf in best_estimators.items():
    start_time = time.time()
    
    # Perform cross-validation
    scores = cross_val_score(clf, X_train_scaled, y_train, cv=10)
    
    # Fit the model to get predictions for classification report
    clf.fit(X_train_scaled, y_train)
    y_pred = clf.predict(X_test_scaled)
    
    # Calculate classification report metrics
    report = classification_report(y_test, y_pred, output_dict=True)
    
    # Store results in the dictionary
    results_with_tuning[name] = {
        "Mean Accuracy": scores.mean(),
        "Standard Deviation": scores.std(),
        "Cross-Validation Time": time.time() - start_time,
        "Precision": report['weighted avg']['precision'],
        "Recall": report['weighted avg']['recall'],
        "F1 Score": report['weighted avg']['f1-score'],
        "Classification Report": classification_report(y_test, y_pred)
    }

# Print results for each classifier with hyperparameter tuning
for name, result in results_with_tuning.items():
    print(f"{name} Results with Hyperparameter Tuning:")
    print(f"Mean Accuracy: {result['Mean Accuracy']:.3f}")
    print(f"Standard Deviation: {result['Standard Deviation']:.3f}")
    print(f"Cross-Validation Time: {result['Cross-Validation Time']:.4f} seconds")
    print(f"Precision: {result['Precision']:.3f}")
    print(f"Recall: {result['Recall']:.3f}")
    print(f"F1 Score: {result['F1 Score']:.3f}")
    print("Classification Report:")
    print(result['Classification Report'])
    print("=" * 50)

    # Extract classifier names and their corresponding mean accuracies from the results dictionary
classifiers = list(results_with_tuning.keys())
mean_accuracies = [results_with_tuning[classifier]['Mean Accuracy'] for classifier in classifiers]

# Colors for each bar, ensure you have enough colors for each classifier
colors = ['red', 'blue', 'green', 'purple', 'orange', 'pink', 'brown', 'gray']

# Create a bar chart for mean accuracies
plt.figure(figsize=(12, 8))
bars = plt.bar(classifiers, mean_accuracies, color=colors)

# Adding the exact number on top of each bar
for bar, accuracy in zip(bars, mean_accuracies):
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{accuracy:.3f}', ha='center', va='bottom', fontsize=10)

# Adding titles and labels
plt.title('Mean Accuracies of Classifiers for Hyperparameter Tuned Dataset')
plt.xlabel('Classifiers')
plt.ylabel('Mean Accuracy')
plt.xticks(rotation=45)  # Rotate classifier names for readability

# Display the plot
plt.tight_layout()  # Adjust layout to fit all elements
plt.show()